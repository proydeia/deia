generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      =  "postgres://default:HnVxZN1SDea2@ep-misty-snow-a4608mqj-pooler.us-east-1.aws.neon.tech:5432/verceldb?sslmode=require"
  //env("POSTGRES_URL")
}

model Organization {
  name     String  @id @unique
  phone    String?
  email    String?
  address  String?
  maxUsers Int
  aproved  Boolean @default(false)
  users    User[]
}

model User {
  email         String       @id @unique
  adm           Boolean
  password      String
  organization  String
  patients      Patient[]
  organizations Organization @relation(fields: [organization], references: [name], onDelete: Cascade)
}

model Patient {
  id           Int          @id @default(autoincrement()) @unique
  extrainfo    String?
  medic        String
  altura       Float
  nacimiento   DateTime     @db.Date
  sexo         Int
  name         String
  users        User         @relation(fields: [medic], references: [email], onDelete: Cascade)
  spirometries Spirometry[]
}

model Spirometry {
  id Int      @id @default(autoincrement()) @unique
  patient Int
  date DateTime @db.Date

  fev1 Float?
  fvc Float?
  
  obstructiongold Float
  obstructionaigold Float
  obstructiongli Float
  obstructionaigli Float
  obstructionaigoldcategorical Float?
  obstructionaiglicategorical Float?
  restrictiongold Float
  restrictionaigold Float
  restrictiongli Float
  restrictionaigli Float 

  correctionobsGold Int? @default(-1)
  correctionobsGoldAi Int? @default(-1)
  correctionobsGli Int? @default(-1)
  correctionobsGliAi Int? @default(-1)
  correctionobsGliAiCategorical Int? @default(-1)
  correctionresGold Int? @default(-1)
  correctionresGoldAi Float? @default(-1)
  correctionresGli Int? @default(-1)
  correctionresGliAi Float? @default(-1)
  enjson Int      @default(0)
  
  patients Patient  @relation(fields: [patient], references: [id], onDelete: Cascade)
}